import React, { useState, useRef, useEffect } from 'react';
import { ConversionTask, UploadedFile, ProcessedFile } from '../../types';
import BaseConversionView from './BaseConversionView';
import * as pdfjsLib from 'pdfjs-dist';
import { PDFDocumentProxy } from 'pdfjs-dist';

// Set up PDF.js worker
pdfjsLib.GlobalWorkerOptions.workerSrc = '/pdf.worker.min.js';

interface PdfToRtfViewProps {
  task: ConversionTask;
}

const PdfToRtfView: React.FC<PdfToRtfViewProps> = ({ task }) => {
  const [pdfDoc, setPdfDoc] = useState<PDFDocumentProxy | null>(null);
  const [totalPages, setTotalPages] = useState(0);
  const [pageSelectionError, setPageSelectionError] = useState<string | null>(null);

  // Validate page selection
  const validatePageSelection = (selection: string): boolean => {
    if (!selection || selection.toLowerCase() === 'all') {
      setPageSelectionError(null);
      return true;
    }
    
    const pages = new Set<number>();
    const parts = selection.split(',');
    
    for (const part of parts) {
      const trimmedPart = part.trim();
      if (trimmedPart.includes('-')) {
        // Handle range like "3-5"
        try {
          const [start, end] = trimmedPart.split('-').map(p => parseInt(p.trim()));
          if (isNaN(start) || isNaN(end) || start > end) {
            setPageSelectionError(`Invalid range format: ${trimmedPart}`);
            return false;
          }
          for (let i = start; i <= end; i++) {
            pages.add(i);
          }
        } catch {
          setPageSelectionError(`Invalid range format: ${trimmedPart}`);
          return false;
        }
      } else {
        // Handle single page
        try {
          const pageNum = parseInt(trimmedPart);
          if (isNaN(pageNum)) {
            setPageSelectionError(`Invalid page number: ${trimmedPart}`);
            return false;
          }
          pages.add(pageNum);
        } catch {
          setPageSelectionError(`Invalid page number: ${trimmedPart}`);
          return false;
        }
      }
    }
    
    // Check if all pages are within valid range
    const maxPage = totalPages;
    const invalidPages = Array.from(pages).filter(page => page < 1 || page > maxPage);
    
    if (invalidPages.length > 0) {
      setPageSelectionError(`Invalid page(s): ${invalidPages.join(', ')}. PDF has ${maxPage} page${maxPage !== 1 ? 's' : ''}.`);
      return false;
    }
    
    setPageSelectionError(null);
    return true;
  };

  const performPdfToRtfConversion = async (
    files: UploadedFile[],
    options: Record<string, any>
  ): Promise<ProcessedFile[]> => {
    if (files.length === 0) return [];
    
    // Validate page selection before conversion
    if (options.page_selection && !validatePageSelection(options.page_selection)) {
      throw new Error('Please fix the page selection errors before converting.');
    }
    
    const file = files[0];
    const formData = new FormData();
    formData.append('file', file.file);
    
    // Add conversion options
    if (options.page_selection) {
      formData.append('page_selection', options.page_selection);
    }
    if (options.ocr !== undefined) {
      formData.append('ocr', options.ocr.toString());
    }
    if (options.preserve_formatting !== undefined) {
      formData.append('preserve_formatting', options.preserve_formatting.toString());
    }
    if (options.include_images !== undefined) {
      formData.append('include_images', options.include_images.toString());
    }
    if (options.font_size) {
      formData.append('font_size', options.font_size);
    }
    if (options.line_spacing) {
      formData.append('line_spacing', options.line_spacing);
    }
    if (options.page_breaks !== undefined) {
      formData.append('page_breaks', options.page_breaks.toString());
    }
    if (options.custom_title) {
      formData.append('custom_title', options.custom_title);
    }
    
    try {
      const response = await fetch('http://localhost:5001/convert/pdf-to-rtf', {
        method: 'POST',
        body: formData,
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Conversion failed');
      }
      
      // Get the filename from the response headers
      const contentDisposition = response.headers.get('content-disposition');
      let filename = `${file.file.name.split('.')[0]}.rtf`;
      if (contentDisposition) {
        const filenameMatch = contentDisposition.match(/filename="(.+)"/);
        if (filenameMatch) {
          filename = filenameMatch[1];
        }
      }
      
      // Create blob from response
      const blob = await response.blob();
      
      // Create download URL
      const downloadUrl = URL.createObjectURL(blob);
      
      return [{
        id: `processed-${file.id}`,
        name: filename,
        type: 'RTF',
        size: `${(blob.size / 1024 / 1024).toFixed(2)}MB`,
        downloadUrl: downloadUrl,
      }];
      
    } catch (error) {
      console.error('PDF to RTF conversion error:', error);
      throw new Error(`Conversion failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  };
  
  const validatePdfFile = (files: UploadedFile[], options: Record<string, any>): string | null => {
    if (files.length === 0 && task.requiresFileUpload) {
      return "Please upload a PDF file.";
    }
    if (files.length > 1) {
      return `Please upload only one PDF file for ${task.name}.`;
    }
    if (files.length === 1 && files[0].file.type !== 'application/pdf') {
      return "Only PDF files (.pdf) are allowed for this conversion.";
    }
    
    // Validate page selection if provided
    if (options.page_selection && totalPages > 0) {
      if (!validatePageSelection(options.page_selection)) {
        return pageSelectionError || 'Invalid page selection.';
      }
    }
    
    console.log(`${task.name} options:`, options);
    return null;
  };

  // Load PDF to get total pages for validation
  const loadPdfForValidation = async (file: File) => {
    try {
      const arrayBuffer = await file.arrayBuffer();
      const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
      setPdfDoc(pdf);
      setTotalPages(pdf.numPages);
    } catch (error) {
      console.error('Error loading PDF for validation:', error);
    }
  };

  // Enhanced validation that loads PDF for page count
  const enhancedValidation = (files: UploadedFile[], options: Record<string, any>): string | null => {
    const basicValidation = validatePdfFile(files, options);
    if (basicValidation) return basicValidation;
    
    // Load PDF for page count if we have a file and page selection
    if (files.length === 1 && options.page_selection && options.page_selection !== 'all') {
      loadPdfForValidation(files[0].file);
    }
    
    return null;
  };

  return (
    <BaseConversionView 
        task={task} 
        performConversion={performPdfToRtfConversion}
        customValidation={enhancedValidation}
    />
  );
};

export default PdfToRtfView;
